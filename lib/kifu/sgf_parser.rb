# Autogenerated from a Treetop grammar. Edits may be lost.


module Kifu::Sgf
  include Treetop::Runtime

  def root
    @root ||= :game_tree
  end

  module GameTree0
    def sequence
      elements[1]
    end

  end

  module GameTree1
    def nodes
      elements[1].nodes
    end

    def hashes
      nodes.map(&:hash)
    end
  end

  def _nt_game_tree
    start_index = index
    if node_cache[:game_tree].has_key?(index)
      cached = node_cache[:game_tree][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('(', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_sequence
      s0 << r2
      if r2
        if has_terminal?(')', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(')')
          r3 = nil
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(GameTree0)
      r0.extend(GameTree1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:game_tree][start_index] = r0

    r0
  end

  module Sequence0
    def nodes
      elements
    end
  end

  def _nt_sequence
    start_index = index
    if node_cache[:sequence].has_key?(index)
      cached = node_cache[:sequence][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_node
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Sequence0)
    end

    node_cache[:sequence][start_index] = r0

    r0
  end

  module Node0
  end

  module Node1

    def multiple?
      elements[1].elements.size > 1
    end

    def name
      elements[1].elements[0].name
    end

    def value
      elements[1].elements[0].value
    end

    def properties
      elements[1].elements
    end

    def hash
      properties.inject({}) { |hash, p| hash[p.name] = p.value; hash }
    end
  end

  def _nt_node
    start_index = index
    if node_cache[:node].has_key?(index)
      cached = node_cache[:node][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(';', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(';')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_property
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        s4, i4 = [], index
        loop do
          r5 = _nt_new_line
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Node0)
      r0.extend(Node1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:node][start_index] = r0

    r0
  end

  module Property0
    def prop_ident
      elements[0]
    end

  end

  module Property1
    def name
      elements[0].text_value
    end

    def value
      values = elements[1].elements.map(&:value)
      values.size == 1 ? values.first : values
    end
  end

  def _nt_property
    start_index = index
    if node_cache[:property].has_key?(index)
      cached = node_cache[:property][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_prop_ident
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_prop_value
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        s4, i4 = [], index
        loop do
          r5 = _nt_new_line
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Property0)
      r0.extend(Property1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:property][start_index] = r0

    r0
  end

  def _nt_prop_ident
    start_index = index
    if node_cache[:prop_ident].has_key?(index)
      cached = node_cache[:prop_ident][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[A-Z]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:prop_ident][start_index] = r0

    r0
  end

  module PropValue0
  end

  module PropValue1
  end

  module PropValue2
    def value
      elements[1].text_value
    end
  end

  def _nt_prop_value
    start_index = index
    if node_cache[:prop_value].has_key?(index)
      cached = node_cache[:prop_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        if has_terminal?('\]', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('\]')
          r4 = nil
        end
        if r4
          r3 = r4
        else
          i5, s5 = index, []
          i6 = index
          if has_terminal?(']', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(']')
            r7 = nil
          end
          if r7
            r6 = nil
          else
            @index = i6
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s5 << r6
          if r6
            if index < input_length
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("any character")
              r8 = nil
            end
            s5 << r8
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(PropValue0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?(']', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(']')
          r9 = nil
        end
        s0 << r9
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(PropValue1)
      r0.extend(PropValue2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:prop_value][start_index] = r0

    r0
  end

  def _nt_new_line
    start_index = index
    if node_cache[:new_line].has_key?(index)
      cached = node_cache[:new_line][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("\n", false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("\n")
      r0 = nil
    end

    node_cache[:new_line][start_index] = r0

    r0
  end

end

class Kifu::SgfParser < Treetop::Runtime::CompiledParser
  include Kifu::Sgf
end
